{"id":715282,"xmlId":"org.intellij.plugins.hcl","name":"Terraform and HCL","description":"<p>\n      Improved <a href=\"https://www.terraform.io/\">Terraform</a> and <a href=\"https://opentofu.org/\">OpenTofu</a> support is tailored for developers, SREs, and DevOps teams, supporting\n      infrastructure management with features like syntax highlighting, code completion, and real-time error checking.\n      Streamline your infrastructure as code (IaC) workflow and boost productivity with comprehensive tooling designed to make development\n      and deployment more efficient.\n   </p>\n\n   <p>Features:</p>\n   <ul>\n     <li>Autocompletion, including for third-party providers from the Terraform Registry.</li>\n     <li><a href=\"https://github.com/hashicorp/hcl\">HCL</a>, <a href=\"https://github.com/hashicorp/hil\">HIL</a>, <a href=\"https://developer.hashicorp.com/terraform/language/functions/templatefile\">TFTPL</a> syntax highlighting and validation</li>\n     <li>Integrated documentation, including for third-party providers from the Terraform Registry.</li>\n     <li>Find Usages / Go to definition for resources, providers, variables, and their properties</li>\n     <li>Rename refactoring</li>\n     <li>Introduce Variable refactoring (for string property values)</li>\n     <li>Several inspections</li>\n     <li>Report usage of deprecated properties</li>\n     <li>Unresolved reference checks (in interpolations)</li>\n     <li>Check required/missing properties in resource/provider</li>\n     <li><a href=\"https://www.terraform.io/docs/configuration/interpolation.html\">Predefined Terraform methods</a> autocompletion in interpolations</li>\n     <li>Better properties validation (type checking)</li>\n     <li>Working with dependent modules</li>\n     <li>Type-specific autocompletion in interpolations</li>\n   </ul>","organization":"JetBrains s.r.o.","tags":["Programming Language"],"version":"251.23774.426","notes":"2025.1\n    <ul>\n      <li>\n        Added support for <strong>provider-defined functions</strong>, ensuring a more robust and feature-complete experience when working with Terraform configurations.\n      </li>\n      <li>\n        Improved actions in Terraform files, enhancing the overall usability and working experience with actions in Terraform files.\n      </li>\n      <li>\n        Interactive gutter actions for OpenTofuâ€™s .tofu configuration files were added: Init, Validate, Plan, Apply, and Destroy, putting your infrastructure commands at your fingertips.\n      </li>\n      <li>\n        Improved the user experience for automatically detecting the Terraform executable, simplifying initial setup and configuration.\n      </li>\n      <li>\n        Resolved the provider version update issue that was specific to Windows machines, ensuring a seamless workflow across platforms.\n      </li>\n    </ul>\n    2024.3\n    <ul>\n      <li>\n        Introduced support for OpenTofu, an open-source, community-driven alternative to Terraform. The IDE now supports .tofu files\n        when OpenTofu is selected, enhancing Infrastructure as Code development with autocompletion for encryption methods, key providers,\n        and inspections for unknown references, ensuring a more secure and efficient setup.\n      </li>\n      <li>\n        Terraform Run Configuration actions are now available through Search Everywhere, streamlining access and usability.\n      </li>\n      <li>\n        Added inspection to detect unused variables and locals in Terraform files, helping keep code cleaner and more maintainable.\n      </li>\n      <li>\n        Usage indicators now highlight variable usage across Terraform files, aiding visibility and navigation of variable dependencies.\n      </li>\n      <li>\n        Added warnings for unused resources, helping developers identify and manage redundant or inactive code.\n      </li>\n      <li>\n        Refined Terraform controls in Gutter (Init, Validate, Plan, Apply, Destroy) for a more predictable and intuitive configuration experience.\n      </li>\n      <li>\n        Improved Terraform Run Configuration form with streamlined options and settings, enhancing user experience.\n      </li>\n      <li>\n        A new option to create Terraform files directly from the Create File menu has been added, making it easier to start new configurations.\n      </li>\n      <li>\n        Git author name inlay hints are now available in Terraform files, aiding collaboration and author tracking within code.\n      </li>\n      <li>\n        The search for variables now prioritizes tfvars files, making variable management more efficient and reducing search noise.\n      </li>\n    </ul>\n    2024.2\n    <ul>\n      <li>AI Full Line Completion for Terraform is now available, running locally on your machine without using external services. It is disabled by default but can be enabled for use. We appreciate your feedback to help improve the model (note that we do not learn from your data).</li>\n      <li>Basic operations, syntax highlighting, and code completion for Terraform are now available immediately, without waiting for indexing. You can start working right away.</li>\n      <li>Enhanced the quick help view for HCL in Terraform, making it more readable and informative.</li>\n      <li>Added a documentation tooltip that appears when hovering over a Terraform resource or attribute.</li>\n      <li>Enhanced performance of the Documentation tool window for faster updates and better visibility of progress.</li>\n      <li>Included the ability to use terraform fmt as an alternative to the default formatter.</li>\n      <li>Added support for composite extensions for .tfpl files. This allows automatic detection of the data language for templates based on composite extensions. For example, if a file has the extension .js.tftpl, the file will be recognized with JavaScript as the data language and tftpl as the primary language.</li>\n      <li>Added support for Terraform resource imports, allowing users to add and manage imported resources directly within the IDE, with automatic detection and matching of resource addresses.</li>\n      <li>Provided support for resolving and finding usages for included variables in Terraform projects. This feature allows users to see the final values of variables, navigate through variable references, and view environment-specific values. Additionally, it provides convenient navigation and refactoring options, enabling users to add or change values across all environments and generate necessary binding variables efficiently.</li>\n      <li>Added support for working with projects in the WSL context. If a project is located in WSL and opened from JetBrains IDE, the Terraform installed in the WSL distribution where the project resides is used.</li>\n      <li>Included support for optional parameters in Terraform variable definitions and module usage, including code completion and documentation.</li>\n      <li>Introduced \"Deep search for variables\" option in Settings | Advanced Settings to enable searching for variables in nested directories (with the ability to disable this behavior).</li>\n      <li>Added the ability to use Move Statement Up/Down for multiple selected blocks.</li>\n      <li>You can now specify tfvars in the Run configuration.</li>\n      <li>Terraform code completion for providers and HCL now scales with the tooltip window, fixing the issue of truncated documentation and enhancing the usefulness of quick documentation.</li>\n      <li>Added highlighting for corresponding parentheses in HCL, enhancing code readability and convenience.</li>\n      <li>The default path to the Terraform executable is now used if the path field is left empty in Settings. Additionally, you can now use the <b>Test</b> button to check the presence and version of Terraform.</li>\n    </ul>\n    2024.1\n    <ul>\n      <li>Improves code completion for a wide range of third-party Terraform providers from the Terraform Registry, supporting efficient coding.</li>\n      <li>Integrates support for the latest documentation of providers directly in the IDE, enabling quick learning and exploration.</li>\n      <li>Adds support for the Terraform Template Language (TFTPL), improving workflows for configuration files, scripts, and program codes.</li>\n      <li>Offers an option to integrate TFTPL files with preferred programming languages for improved templating flexibility.</li>\n      <li>Recommends running \"terraform init\" to initialize the working directory, improving code autocompletion and inspections with local, up-to-date metadata.</li>\n      <li>Enables moving expressions, lines, or blocks of code up or down within a file.</li>\n      <li>Support for the \"Removed\" block has been added.</li>\n      <li>Now automatically adds comment markers when a new line is inserted within a comment block.</li>\n      <li>HCL syntax checks improved.</li>\n      <li>Added support for the lifecycle meta-argument.</li>\n    </ul>\n    2023.3\n    <ul>\n      <li>Support for import block</li>\n      <li>Support for loop that produces objects</li>\n      <li>Completion in the nested attributes blocks</li>\n      <li>Updated metadata</li>\n    </ul>\n    2023.2\n    <ul>\n      <li>Fixed performance issues in the editor</li>\n      <li>Improved performance of variable suggestions</li>\n      <li>Support for access_policy block</li>\n    </ul>\n    2023.1\n    <ul>\n      <li>New metadata bundled for all official and most popular providers\n          from <a href=\"https://registry.terraform.io\">Terraform Registry</a></li>\n      <li>Terraform intentions and quickfixes now provide intention preview</li>\n    </ul>","dependencies":["intellij.platform.vcs.impl","com.intellij.modules.lang"],"optionalDependencies":["com.intellij.plugins.watcher","com.intellij.modules.ultimate"],"since":"251.23774","until":"251.*","size":32981660,"vendor":"JetBrains","sourceCodeUrl":"https://github.com/JetBrains/intellij-plugins/tree/HEAD/terraform"}